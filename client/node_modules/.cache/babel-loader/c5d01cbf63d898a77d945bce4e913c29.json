{"ast":null,"code":"var _jsxFileName = \"/Users/maryannn28/Projects/PCH-Real-Estate/client/src/views/application/e-commerce/Products/Colors.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React from 'react'; // material-ui\n\nimport { useTheme } from '@material-ui/styles';\nimport { ButtonBase, Grid, Skeleton, Tooltip } from '@material-ui/core'; // project imports\n\nimport Avatar from 'ui-component/extended/Avatar';\nimport ColorOptions from '../ColorOptions'; // assets\n\nimport CheckIcon from '@material-ui/icons/Check'; // ===========================|| PRODUCT - COLOR OPTIONS ||=========================== //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Color = ({\n  bg,\n  color,\n  id,\n  colors,\n  label,\n  handelFilter\n}) => {\n  _s();\n\n  const theme = useTheme();\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: label,\n      children: /*#__PURE__*/_jsxDEV(ButtonBase, {\n        sx: {\n          borderRadius: '50%'\n        },\n        onClick: () => handelFilter('colors', id),\n        children: /*#__PURE__*/_jsxDEV(Avatar, {\n          color: \"inherit\",\n          size: \"badge\",\n          sx: {\n            bgcolor: bg,\n            color: theme.palette.mode === 'light' ? theme.palette.grey[50] : theme.palette.grey[800],\n            opacity: colors.some(item => item === id) ? 0.6 : 1\n          },\n          children: colors.some(item => item === id) && /*#__PURE__*/_jsxDEV(CheckIcon, {\n            color: color === 'light' ? theme.palette.grey[50] : theme.palette.grey[800],\n            fontSize: \"inherit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Color, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n\n_c = Color;\nColor.propTypes = {\n  bg: PropTypes.string,\n  id: PropTypes.string,\n  label: PropTypes.string,\n  color: PropTypes.string,\n  colors: PropTypes.array,\n  handelFilter: PropTypes.func\n}; // ===========================|| PRODUCT - COLOR ||=========================== //\n\nconst Colors = ({\n  colors,\n  handelFilter\n}) => {\n  _s2();\n\n  const [isColorsLoading, setColorLoading] = React.useState(true);\n  React.useEffect(() => {\n    setColorLoading(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isColorsLoading ? /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rectangular\",\n        width: \"100%\",\n        height: 158\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      alignItems: \"center\",\n      children: ColorOptions.map((color, index) => /*#__PURE__*/_jsxDEV(Color, {\n        id: color.value,\n        bg: color.bg,\n        label: color.label,\n        colors: colors,\n        handelFilter: handelFilter\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s2(Colors, \"P66UWmDByeKZfa7uhcbzkP5oQPQ=\");\n\n_c2 = Colors;\nColors.propTypes = {\n  colors: PropTypes.array,\n  handelFilter: PropTypes.func\n};\nexport default Colors;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Color\");\n$RefreshReg$(_c2, \"Colors\");","map":{"version":3,"sources":["/Users/maryannn28/Projects/PCH-Real-Estate/client/src/views/application/e-commerce/Products/Colors.js"],"names":["PropTypes","React","useTheme","ButtonBase","Grid","Skeleton","Tooltip","Avatar","ColorOptions","CheckIcon","Color","bg","color","id","colors","label","handelFilter","theme","borderRadius","bgcolor","palette","mode","grey","opacity","some","item","propTypes","string","array","func","Colors","isColorsLoading","setColorLoading","useState","useEffect","map","index","value"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@material-ui/styles';\r\nimport { ButtonBase, Grid, Skeleton, Tooltip } from '@material-ui/core';\r\n\r\n// project imports\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport ColorOptions from '../ColorOptions';\r\n\r\n// assets\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\n// ===========================|| PRODUCT - COLOR OPTIONS ||=========================== //\r\n\r\nconst Color = ({ bg, color, id, colors, label, handelFilter }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Grid item>\r\n            <Tooltip title={label}>\r\n                <ButtonBase sx={{ borderRadius: '50%' }} onClick={() => handelFilter('colors', id)}>\r\n                    <Avatar\r\n                        color=\"inherit\"\r\n                        size=\"badge\"\r\n                        sx={{\r\n                            bgcolor: bg,\r\n                            color: theme.palette.mode === 'light' ? theme.palette.grey[50] : theme.palette.grey[800],\r\n                            opacity: colors.some((item) => item === id) ? 0.6 : 1\r\n                        }}\r\n                    >\r\n                        {colors.some((item) => item === id) && (\r\n                            <CheckIcon color={color === 'light' ? theme.palette.grey[50] : theme.palette.grey[800]} fontSize=\"inherit\" />\r\n                        )}\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Tooltip>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nColor.propTypes = {\r\n    bg: PropTypes.string,\r\n    id: PropTypes.string,\r\n    label: PropTypes.string,\r\n    color: PropTypes.string,\r\n    colors: PropTypes.array,\r\n    handelFilter: PropTypes.func\r\n};\r\n\r\n// ===========================|| PRODUCT - COLOR ||=========================== //\r\n\r\nconst Colors = ({ colors, handelFilter }) => {\r\n    const [isColorsLoading, setColorLoading] = React.useState(true);\r\n    React.useEffect(() => {\r\n        setColorLoading(false);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {isColorsLoading ? (\r\n                <Grid item xs={12}>\r\n                    <Skeleton variant=\"rectangular\" width=\"100%\" height={158} />\r\n                </Grid>\r\n            ) : (\r\n                <Grid container spacing={1} alignItems=\"center\">\r\n                    {ColorOptions.map((color, index) => (\r\n                        <Color key={index} id={color.value} bg={color.bg} label={color.label} colors={colors} handelFilter={handelFilter} />\r\n                    ))}\r\n                </Grid>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nColors.propTypes = {\r\n    colors: PropTypes.array,\r\n    handelFilter: PropTypes.func\r\n};\r\n\r\nexport default Colors;\r\n"]},"metadata":{},"sourceType":"module"}