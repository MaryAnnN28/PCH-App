{"ast":null,"code":"import services from 'utils/mockAdapter'; // third-party\n\nimport { Chance } from 'chance';\nimport { v4 as UIDV4 } from 'uuid';\nconst chance = new Chance(); // billing address list\n\nlet address = [{\n  id: 1,\n  name: chance.name(),\n  destination: 'home',\n  building: chance.address({\n    short_suffix: true\n  }),\n  street: chance.address({\n    short_suffix: false\n  }),\n  city: chance.city(),\n  state: chance.state({\n    full: true\n  }),\n  country: chance.country({\n    full: true\n  }),\n  post: chance.postcode(),\n  phone: chance.phone(),\n  isDefault: true\n}, {\n  id: 2,\n  name: chance.name(),\n  destination: 'office',\n  building: chance.address({\n    short_suffix: true\n  }),\n  street: chance.address({\n    short_suffix: false\n  }),\n  city: chance.city(),\n  state: chance.state({\n    full: true\n  }),\n  country: chance.country({\n    full: true\n  }),\n  post: chance.postcode(),\n  phone: chance.phone(),\n  isDefault: false\n}]; // ===========================|| MOCK SERVICES ||=========================== //\n\nservices.onGet('/api/address/list').reply(200, {\n  address\n});\nservices.onPost('/api/address/new').reply(request => {\n  try {\n    const {\n      data\n    } = JSON.parse(request.data);\n    const {\n      isDefault\n    } = data; // name, destination, building, street, city, state, country, post, phone,\n\n    const newAddress = {\n      id: UIDV4(),\n      ...data // comment amit\n      // name: name,\n      // destination: destination,\n      // building: building,\n      // street: street,\n      // city: city,\n      // state: state,\n      // country: country,\n      // post: post,\n      // phone: phone,\n      // isDefault: isDefault\n\n    };\n\n    if (isDefault) {\n      address = address.map(item => item.isDefault === true ? { ...item,\n        isDefault: false\n      } : item);\n    }\n\n    address = [...address, newAddress];\n    return [200, {\n      address\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nservices.onPost('/api/address/edit').reply(request => {\n  try {\n    const {\n      data\n    } = JSON.parse(request.data);\n\n    if (data.isDefault) {\n      address = address.map(item => item.isDefault === true ? { ...item,\n        isDefault: false\n      } : item);\n    }\n\n    address = address.map(item => item.id === data.id ? data : item);\n    return [200, {\n      address\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});","map":{"version":3,"sources":["/Users/maryannn28/Projects/PCH-Real-Estate/client/src/_mockApis/e-commerce/billing-address.js"],"names":["services","Chance","v4","UIDV4","chance","address","id","name","destination","building","short_suffix","street","city","state","full","country","post","postcode","phone","isDefault","onGet","reply","onPost","request","data","JSON","parse","newAddress","map","item","err","console","error","message"],"mappings":"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","sourcesContent":["import services from 'utils/mockAdapter';\r\n\r\n// third-party\r\nimport { Chance } from 'chance';\r\nimport { v4 as UIDV4 } from 'uuid';\r\n\r\nconst chance = new Chance();\r\n\r\n// billing address list\r\nlet address = [\r\n    {\r\n        id: 1,\r\n        name: chance.name(),\r\n        destination: 'home',\r\n        building: chance.address({ short_suffix: true }),\r\n        street: chance.address({ short_suffix: false }),\r\n        city: chance.city(),\r\n        state: chance.state({ full: true }),\r\n        country: chance.country({ full: true }),\r\n        post: chance.postcode(),\r\n        phone: chance.phone(),\r\n        isDefault: true\r\n    },\r\n    {\r\n        id: 2,\r\n        name: chance.name(),\r\n        destination: 'office',\r\n        building: chance.address({ short_suffix: true }),\r\n        street: chance.address({ short_suffix: false }),\r\n        city: chance.city(),\r\n        state: chance.state({ full: true }),\r\n        country: chance.country({ full: true }),\r\n        post: chance.postcode(),\r\n        phone: chance.phone(),\r\n        isDefault: false\r\n    }\r\n];\r\n\r\n// ===========================|| MOCK SERVICES ||=========================== //\r\n\r\nservices.onGet('/api/address/list').reply(200, { address });\r\n\r\nservices.onPost('/api/address/new').reply((request) => {\r\n    try {\r\n        const { data } = JSON.parse(request.data);\r\n        const { isDefault } = data; // name, destination, building, street, city, state, country, post, phone,\r\n        const newAddress = {\r\n            id: UIDV4(),\r\n            ...data\r\n            // comment amit\r\n            // name: name,\r\n            // destination: destination,\r\n            // building: building,\r\n            // street: street,\r\n            // city: city,\r\n            // state: state,\r\n            // country: country,\r\n            // post: post,\r\n            // phone: phone,\r\n            // isDefault: isDefault\r\n        };\r\n\r\n        if (isDefault) {\r\n            address = address.map((item) => (item.isDefault === true ? { ...item, isDefault: false } : item));\r\n        }\r\n\r\n        address = [...address, newAddress];\r\n\r\n        return [200, { address }];\r\n    } catch (err) {\r\n        console.error(err);\r\n        return [500, { message: 'Internal server error' }];\r\n    }\r\n});\r\n\r\nservices.onPost('/api/address/edit').reply((request) => {\r\n    try {\r\n        const { data } = JSON.parse(request.data);\r\n\r\n        if (data.isDefault) {\r\n            address = address.map((item) => (item.isDefault === true ? { ...item, isDefault: false } : item));\r\n        }\r\n\r\n        address = address.map((item) => (item.id === data.id ? data : item));\r\n\r\n        return [200, { address }];\r\n    } catch (err) {\r\n        console.error(err);\r\n        return [500, { message: 'Internal server error' }];\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}